import asyncio
import random
import logging

from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram import executor, types, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import markdown

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from loguru import logger
from pathlib import Path

from texts import Texts, dict_daily_bonuses
from keyboards import Markups
from bf_texts import bf_sending, SendingData
from src.common import settings
from src.models import db, db_sendings

from data.skip_100_lead import skip_100_leads


storage = RedisStorage2(db=settings.redis_db, pool_size=40)
bot = Bot(settings.tg_token)
dp = Dispatcher(bot, storage=storage)
ADMIN_IDS = (1371617744, 791363343)
markups = Markups()
daily_cards_photos = \
    [
        Path("data/photos/daily_cards_photos/card0.JPG"),
        Path("data/photos/daily_cards_photos/card1.JPG"),
        Path("data/photos/daily_cards_photos/card2.JPG"),
        Path("data/photos/daily_cards_photos/card3.JPG"),
        Path("data/photos/daily_cards_photos/card4.JPG"),
        Path("data/photos/daily_cards_photos/card5.JPG")
    ]

class States(StatesGroup):
    name = State()


async def get_photo_id(path: Path) -> str | types.InputFile:
    photo_id = await db.get_photo_id(path)
    if photo_id is None:
        photo_id = types.InputFile(path)
    return photo_id


@dp.message_handler(commands=['start'], state='*')
@logger.catch
async def send_welcome(message: types.Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    path_photo = Path("data/photos/start_photo.png")
    photo = await get_photo_id(path=path_photo)
    msg = await message.answer_photo(photo, Texts.start_text, reply_markup=Markups.mrkup_to_metaphorical_analysis)

    await db.registrate_if_not_exists(message.from_user.id)
    if isinstance(photo, types.InputFile):
        await db.register_photo(path_photo, msg.photo[0].file_id)

@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state='*', commands=['admin'])
async def admin_menu(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markups.admin_mrkup)


@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data.startswith('Admin'), state='*')
async def admin_calls(call: types.CallbackQuery, state: FSMContext) -> None:
    action = '_'.join(call.data.split('_')[1:])
    if action == 'Users_Total':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {await db.get_count_all_users()}',
                                     reply_markup=markups.back_admin_mrkup)

    elif action == 'Users_For_TODAY':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await db.users_for_today()}',
                                     reply_markup=markups.back_admin_mrkup)

    elif action == 'BACK':
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markups.admin_mrkup)


@dp.message_handler(lambda message: message.text in Texts.menu_texts.keys(), state='*')
async def send_analysis_message(message: types.Message, state: FSMContext):
    menu_item = Texts.menu_texts[message.text]
    if message.text == "üîÆ–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä":
        markup = types.ReplyKeyboardRemove()
    else:
        markup = Markups.to_menu_markup
    photo = await get_photo_id(menu_item.photo)
    msg = await message.answer_photo(photo, menu_item.text, reply_markup=markup)
    if isinstance(photo, types.InputFile):
        await db.register_photo(menu_item.photo, msg.photo[0].file_id)

    if message.text == "üîÆ–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä":
        asyncio.create_task(sending_cards(message))


@dp.message_handler(lambda message: message.text == 'üéÅ–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', state='*')
async def daily_bonus(message: types.Message, state: FSMContext):
    await message.answer(Texts.daily_bonus_text, reply_markup=Markups.daily_bonus_mrkup)


@dp.message_handler(lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞', state='*')
async def menu_metaphorical_analysis(message: types.Message, state: FSMContext):
    await message.answer("–û—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–æ–ø—Ä–æ—Å–µ. –ö—Å—Ç–∞—Ç–∏, –∫–∞–∫—É—é —Å—Ñ–µ—Ä—É —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å:",
                         reply_markup=markups.mrkup_to_metaphorical_analysis)


# @dp.callback_query_handler(lambda query: query.data in ['category:finance', 'category:implementation', 'category:relationships', 'category:other', 'category:health'], state='*')
# async def after_menu_metaphorical_analysis(callback_query: types.CallbackQuery, state: FSMContext):
#     await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É. –ö–∞–∫ –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
#                          reply_markup=Markups.to_menu_markup)
#     await state.set_state(States.name.state)


@dp.callback_query_handler(lambda query: query.data in ['category:finance', 'category:implementation', 'category:relationships', 'category:other', 'category:health'], state='*')
async def set_number_metaphorical_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    number = random.randint(10000, 100000)
    path = Path("data/photos/metaphorical_analysis.png")
    photo_id = await get_photo_id(path)
    msg = await callback_query.message.answer_photo(photo_id,
                                     f"–ù–∞–ø–∏—à–µ—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @spiriti_guide üëà, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥",
                                     reply_markup=Markups.to_menu_markup)
    if isinstance(photo_id, types.InputFile):
        await db.register_photo(path, msg["photo"][0]["file_id"])
    await state.finish()


@dp.message_handler(lambda message: message.text == "‚ù§Ô∏è–ö–∞—Ä—Ç–∞ –¥–Ω—è", state='*')
async def daily_card(message: types.Message, state: FSMContext):
    await message.answer(Texts.daily_card_text, reply_markup=types.ReplyKeyboardRemove())
    asyncio.create_task(send_card_day(message))


async def send_card_day(message: types.Message):
    await asyncio.sleep(2.7)
    user_step = await db.get_daily_card_step(message.from_user.id)
    photo = daily_cards_photos[user_step]
    if isinstance(photo, str):
        await message.answer_photo(photo, reply_markup=Markups.to_menu_markup)
    else:
        with photo.open('rb') as f:
            msg = await message.answer_photo(f, reply_markup=Markups.to_menu_markup)
        daily_cards_photos[user_step] = msg.photo[-1].file_id


@dp.message_handler(lambda message: message.text == 'üßø–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è', state='*')
async def daily_affirmation(message: types.Message, state: FSMContext):
    await message.answer(Texts.daily_affirmation[await db.get_daily_affirmation_step(message.from_user.id)], reply_markup=Markups.to_menu_markup)


@dp.message_handler(lambda message: message.text == 'üìù–ß–µ–∫-–ª–∏—Å—Ç', state='*')
async def check_lists_menu(message: types.Message, state: FSMContext):
    daily_bonus_step = await db.get_day_bonus_step(message.from_user.id)
    await message.answer(Texts.generate_day_bonus_text(daily_bonus_step), reply_markup=Markups.generate_daily_bonus_mrkup(daily_bonus_step))


@dp.message_handler(lambda message: message.text in dict_daily_bonuses, state='*')
async def show_daily_bonus(message: types.Message, state: FSMContext):
    daily_bonus = dict_daily_bonuses[message.text]  # check-list file
    if isinstance(daily_bonus.file, Path):
        with daily_bonus.file.open('rb') as check_list_file:
            bot_msg = await message.answer_document(check_list_file, caption=daily_bonus.text, reply_markup=Markups.to_menu_markup)
        daily_bonus.file = bot_msg.document.file_id
    else:
        await message.answer_document(daily_bonus.file, caption=daily_bonus.text, reply_markup=Markups.to_menu_markup)


async def sending_cards(message: types.Message):
    for index_card, card in enumerate(Texts.card_on_day):
        if index_card == len(Texts.card_on_day)-1:
            mrkup = Markups.choose_card_markup
        else:
            mrkup = None
        await asyncio.sleep(1.5)
        photo = await get_photo_id(card.photo)
        msg = await message.answer_photo(photo, card.name, reply_markup=mrkup)
        if isinstance(photo, types.InputFile):
            await db.register_photo(card.photo, msg.photo[0].file_id)


@dp.message_handler(lambda message: message.text.startswith('–ö–∞—Ä—Ç–∞ ') and not message.text.endswith("–¥–Ω—è"), state="*")
async def message_items(message: types.Message, state: FSMContext):
    card_step = int(message.text.split()[1])-1
    meta_card = Texts.card_on_day[int(card_step)]
    card_text = random.choice(Texts.card_texts)
    photo = await get_photo_id(meta_card.photo)
    msg = await message.answer_photo(photo, card_text, reply_markup=Markups.to_menu_markup)
    if isinstance(photo, types.InputFile):
        await db.register_photo(meta_card.photo, msg.photo[0].file_id)
    asyncio.create_task(send_late_thanks(message, meta_card.late_thanks_text))


async def send_late_thanks(message: types.Message, text: str):
    await asyncio.sleep(4.5)
    await message.answer(f"üí´–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ú–∞—Ä–∏ –≥–æ—Ç–æ–≤–∞ —Å–¥–µ–ª–∞—Ç—å –í–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ –í–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ú–∞—Ä–∏ ‚Äî @spiriti_guide üëà", reply_markup=Markups.to_our_account)


@dp.message_handler(lambda message: message.text == "üëà–û–±—Ä–∞—Ç–Ω–æ", state="*")
async def message_items(message: types.Message, state: FSMContext):
    path_photo = Path("data/photos/start_photo.png")
    photo = await get_photo_id(path=path_photo)
    msg = await message.answer_photo(photo, Texts.start_text, reply_markup=Markups.menu_markup)

    await db.registrate_if_not_exists(message.from_user.id)
    if isinstance(photo, types.InputFile):
        await db.register_photo(path_photo, msg.photo[0].file_id)



async def sending_messages_2h():
    while True:
        try:
            await asyncio.sleep(7)
            path = Path("data/photos/sending_photos/2_h.png")
            photo_id = await get_photo_id(path)

            text_for_2h_autosending = f'{markdown.hbold("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!")}\n\n–û—á–µ–Ω—å —Ä–∞–¥–∞ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èüòä –Ø –ú–∞—Ä–∏  - –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–µ—Ä–≥–æ–∫–æ—É—á –ø–æ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–æ—Ä–∞–º —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n‚≠ê –í —á–µ—Å—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Ö–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º –ø–µ—Ä–≤—É—é {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!")}\n\n‚ùó–ù–∞ –Ω–µ–π –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ {markdown.hbold("–ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º")} –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç. –≠—Ç–∞ –º–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç {markdown.hbold("–Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É")} ‚Äî –æ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤ —Å–µ–º—å–µ –¥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤üòé.\n\nüòâ –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–æ–≤–æ "–†–∞–∑–±–æ—Ä" –∏ –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º!\n–ñ–¥—É –í–∞—Å ‚Äî @spiriti_guide üëà'
            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –†–ê–ó–ë–û–† ‚ö°', url=f'https://t.me/spiriti_guide'))

            users = await db_sendings.get_users_2h_autosending()
            for user in users:
                try:
                    msg = await bot.send_photo(user, photo=photo_id, caption=text_for_2h_autosending, parse_mode='html', reply_markup=mrkup)
                    if isinstance(photo_id, types.InputFile):
                        await db.register_photo(path, msg["photo"][0]["file_id"])
                    logger.info(f'ID: {user}. Got 2h_autosending')
                    await db_sendings.mark_got_2h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            logger.error(ex)
            await bot.send_message(1371617744, f'Happened: {ex}')


async def sending_message_24_h():
    while True:
        try:
            await asyncio.sleep(12)
            path = Path("data/photos/sending_photos/24_h.png")
            photo_id = await get_photo_id(path)

            text_autosending_24h = f'–°–µ–≥–æ–¥–Ω—è –º–æ—â–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏ –ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏, –∫–æ–≥–¥–∞ {markdown.hbold("–ª–µ–≥–∫–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å—É–¥—å–±—É")} üåï\n\n–í —Ç–∞–∫–∏–µ –¥–Ω–∏ —è —Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª—é–¥–µ–π, –Ω–æ —É—Å–ø–µ—é –ø—Ä–∏–Ω—è—Ç—å –ª–∏—à—å {markdown.hbold("9 —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é")} –ª—é–±–æ–π —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å!\n\n‚ùóÔ∏è–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ  —ç—Ç–æ—Ç –∑–Ω–∞–∫ –í—Å–µ–ª–µ–Ω–Ω–æ–π - –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–Ω–Ω–æ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã–º –≤ –í–∞—à–µ–π –∂–∏–∑–Ω–∏ üòâ\n\n–ü–∏—à–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @spiriti_guide —Å–ª–æ–≤–æ {markdown.hbold("–†–∞–∑–±–æ—Ä")} üëá'
            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton('‚ú® –†–ê–ó–ë–û–† ‚ú®', url=f'https://t.me/spiriti_guide'))

            users = await db_sendings.get_users_24h_autosending()
            for user in users:
                try:
                    msg = await bot.send_photo(user, photo=photo_id, caption=text_autosending_24h, parse_mode='html', reply_markup=mrkup)
                    if isinstance(photo_id, types.InputFile):
                        await db.register_photo(path, msg["photo"][0]["file_id"])
                    logger.info(f'ID: {user}. Got autosending_24h')
                    await db_sendings.mark_got_24h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            logger.error(ex)
            await bot.send_message(1371617744, f'Happened: {ex}')

async def sending_message_48_h():
    while True:
        try:
            await asyncio.sleep(12)
            path = Path("data/photos/sending_photos/48_h.png")
            photo_id = await get_photo_id(path)

            text_autosending_48h = f'{markdown.hbold("–û—Ç–≤–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –í–∞—Å")}üíñ\n\n–ú—ã –Ω–µ –º–µ–Ω—è–µ–º –Ω–∏—á–µ–≥–æ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –±–æ–∏–º—Å—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏üòû. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å {markdown.hbold("–∂–µ–ª–∞–µ–º—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∂–∏–∑–Ω–∏")} –∏ –ø—Ä–∏–π—Ç–∏ –∫ –Ω–µ–º—É. ü§© {markdown.hbold("–í–µ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –í–∞—Å!")}\n\n–°–µ–≥–æ–¥–Ω—è –ê–ö–¶–ò–Ø –Ω–∞ —Ä–∞–∑–±–æ—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–∞–≤–ª—è—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–æ—Å—Ç–∞ –≤ —Å—Ñ–µ—Ä–µ –¥–µ–Ω–µ–≥ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –ª–µ—Ç! –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ –º—ã —Å –í–∞–º–∏ –∏—Å–ø—Ä–∞–≤–∏–º –∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ñ–µ—Ä–∞—Ö {markdown.hbold("–ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.")}\n\n‚ùóÔ∏è–í–æ–∑—å–º—É {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω–æ")} –ø–µ—Ä–≤—ã—Ö 5 —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤! –ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–≤–µ–∑–µ—Ç üòâ\n\n–ü–∏—à–∏ —Å–∫–æ—Ä–µ–π –≤ –ª–∏—á–∫—É —Å–ª–æ–≤–æ {markdown.hbold("–†–ê–ó–ë–û–†")} @spiriti_guide üëà'
            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton('‚ö°Ô∏è –ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–ó–ë–û–† ‚ö°Ô∏è', url=f'https://t.me/spiriti_guide'))

            users_for_autosending_1 = await db_sendings.get_users_48h_autosending()
            for user in users_for_autosending_1:
                try:
                    msg = await bot.send_photo(user, photo=photo_id, caption=text_autosending_48h, parse_mode='html', reply_markup=mrkup)
                    if isinstance(photo_id, types.InputFile):
                        await db.register_photo(path, msg["photo"][0]["file_id"])
                    logger.info(f'ID: {user}. Got autosending_text_48h')
                    await db_sendings.mark_got_48h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            logger.error(ex)
            await bot.send_message(1371617744, f'Happened: {ex}')


async def bf_task(id_: int, sending: SendingData, db_func, skip_if_chat_member: bool = False, only_for_chat_member: bool = False):
    try:

        if skip_if_chat_member or only_for_chat_member:
            chat_member = await bot.get_chat_member(-1002059782974, id_)
            if chat_member.is_chat_member() and skip_if_chat_member:
                return 'skip'
            elif not chat_member.is_chat_member() and only_for_chat_member:
                return 'skip'
            name = chat_member.user.first_name
        else:
            name = None

        if id_ in skip_100_leads:
            return 'skip'

        text = await sending.get_text(bot, id_, name)
        if sending.photo is not None:
            await bot.send_photo(id_, types.InputFile(sending.photo), caption=text, reply_markup=sending.kb,
                                 parse_mode='html', disable_notification=True)
        else:
            await bot.send_message(id_, text=text, reply_markup=sending.kb,
                                   parse_mode='html', disable_web_page_preview=True)
        await db_func(id_)
        sending.count += 1
        logger.success(f'{id_} sending_{sending.uid} text')

    except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
        logger.exception(f'ID: {id_}. DELETED')
        await db.delete_user(id_)
    except Exception as e:
        logger.error(f'BUG: {e}')
    else:
        return 'success'
    return 'false'


async def sending_newsletter():
    white_day = 30
    now_time = datetime.now()

    if now_time.day > white_day:
        return

    while True:
        await asyncio.sleep(2)
        if now_time.day == white_day and now_time.hour >= 15:
            try:
                tasks = []
                users = [1371617744] + list(await db_sendings.get_users_for_sending_newsletter_by_date())
                print(len(users))
                for user in users:
                    logger.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - {user}")
                    try:
                        _s = bf_sending
                        # if _s.count >= 80000:
                        #     break
                        tasks.append(asyncio.create_task(bf_task(user, _s, db_sendings.set_newsletter)))
                        if len(tasks) > 40:
                            print(len(tasks))
                            r = await asyncio.gather(*tasks, return_exceptions=False)
                            await asyncio.wait(tasks)
                            await asyncio.sleep(0.4)
                            logger.info(f"{r.count('success')=}", f"{r.count('false')=}", f"{r.count('skip')=}")
                            tasks.clear()

                    except Exception as ex:
                        logger.error(f'–û—à–∏–±–∫–∞ –≤ –º–∞–ª–æ–º –±–ª–æ–∫–µ sending: {ex}')
                    finally:
                        await asyncio.sleep(0.03)
            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ–ª—å—à–æ–º –±–ª–æ–∫–µ sending - {ex}")
            finally:
                await bot.send_message(1371617744, f"ERROR –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–æ–ø–Ω—É–ª–∞—Å—å.")
                logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")


async def on_startup(_):
    #asyncio.create_task(sending_newsletter())
    asyncio.create_task(sending_messages_2h())
    asyncio.create_task(sending_message_24_h())
    asyncio.create_task(sending_message_48_h())


try:
    a_logger = logging.getLogger('apscheduler.scheduler')
    a_logger.setLevel(logging.DEBUG)
    scheduler = AsyncIOScheduler({'apscheduler.timezone': 'Europe/Moscow'})
    scheduler.add_job(trigger='cron', hour='00', minute='00', func=db.update_users_daily_steps)
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)
finally:
    stop = True
